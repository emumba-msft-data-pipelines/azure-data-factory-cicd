{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "demoCustomerADF7sfxgerryq4d6"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Covid_Tracking_Ontario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "To Raw Partition",
						"description": "abc",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": {
										"value": "$.result._links.next",
										"type": "Expression"
									},
									"Headers['Break_API_Call_When_All_Records_Received']": {
										"value": "$.result.records[0].Row_ID",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['Row_ID']"
										},
										"sink": {
											"name": "Row_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Accurate_Episode_Date']"
										},
										"sink": {
											"name": "Accurate_Episode_Date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Case_Reported_Date']"
										},
										"sink": {
											"name": "Case_Reported_Date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Test_Reported_Date']"
										},
										"sink": {
											"name": "Test_Reported_Date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Specimen_Date']"
										},
										"sink": {
											"name": "Specimen_Date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Age_Group']"
										},
										"sink": {
											"name": "Age_Group",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Client_Gender']"
										},
										"sink": {
											"name": "Client_Gender",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Case_AcquisitionInfo']"
										},
										"sink": {
											"name": "Case_AcquisitionInfo",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Outcome1']"
										},
										"sink": {
											"name": "Outcome1",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Outbreak_Related']"
										},
										"sink": {
											"name": "Outbreak_Related",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU']"
										},
										"sink": {
											"name": "Reporting_PHU",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU_Address']"
										},
										"sink": {
											"name": "Reporting_PHU_Address",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU_City']"
										},
										"sink": {
											"name": "Reporting_PHU_City",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU_Postal_Code']"
										},
										"sink": {
											"name": "Reporting_PHU_Postal_Code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU_Website']"
										},
										"sink": {
											"name": "Reporting_PHU_Website",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU_Latitude']"
										},
										"sink": {
											"name": "Reporting_PHU_Latitude",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU_Longitude']"
										},
										"sink": {
											"name": "Reporting_PHU_Longitude",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['result']['records']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "rest_source_dataset",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@pipeline().parameters.sourceRelativeUrl",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_source_dataset",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@concat(pipeline().parameters.rawBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(pipeline().parameters.sourceFilename,'_',pipeline().RunId,'.csv')",
										"type": "Expression"
									},
									"container": {
										"value": "@pipeline().parameters.blobContainer",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "To Raw Overwrite",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": {
										"value": "$.result._links.next",
										"type": "Expression"
									},
									"Headers['Break_API_Call_When_All_Records_Received']": {
										"value": "$.result.records[0].Row_ID",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['Row_ID']"
										},
										"sink": {
											"name": "Row_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Accurate_Episode_Date']"
										},
										"sink": {
											"name": "Accurate_Episode_Date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Case_Reported_Date']"
										},
										"sink": {
											"name": "Case_Reported_Date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Test_Reported_Date']"
										},
										"sink": {
											"name": "Test_Reported_Date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Specimen_Date']"
										},
										"sink": {
											"name": "Specimen_Date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Age_Group']"
										},
										"sink": {
											"name": "Age_Group",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Client_Gender']"
										},
										"sink": {
											"name": "Client_Gender",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Case_AcquisitionInfo']"
										},
										"sink": {
											"name": "Case_AcquisitionInfo",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Outcome1']"
										},
										"sink": {
											"name": "Outcome1",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Outbreak_Related']"
										},
										"sink": {
											"name": "Outbreak_Related",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU']"
										},
										"sink": {
											"name": "Reporting_PHU",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU_Address']"
										},
										"sink": {
											"name": "Reporting_PHU_Address",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU_City']"
										},
										"sink": {
											"name": "Reporting_PHU_City",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU_Postal_Code']"
										},
										"sink": {
											"name": "Reporting_PHU_Postal_Code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU_Website']"
										},
										"sink": {
											"name": "Reporting_PHU_Website",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU_Latitude']"
										},
										"sink": {
											"name": "Reporting_PHU_Latitude",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Reporting_PHU_Longitude']"
										},
										"sink": {
											"name": "Reporting_PHU_Longitude",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['result']['records']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "rest_source_dataset",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@pipeline().parameters.sourceRelativeUrl",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_source_dataset",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.sourceFilename",
										"type": "Expression"
									},
									"container": {
										"value": "@pipeline().parameters.blobContainer",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Reformat Columns",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "To Raw Partition",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "To Raw Overwrite",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "transformations",
								"type": "DataFlowReference",
								"parameters": {
									"filename": {
										"value": "'@{pipeline().parameters.filename}'",
										"type": "Expression"
									},
									"runid": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceCSV": {
										"directory": {
											"value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
											"type": "Expression"
										},
										"file": {
											"value": "@pipeline().parameters.sourceFilename",
											"type": "Expression"
										},
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										}
									},
									"SinkLatestCSV": {
										"directory": {
											"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
											"type": "Expression"
										},
										"file": {
											"value": "@concat(pipeline().parameters.filename,'.csv')",
											"type": "Expression"
										},
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										}
									},
									"sinkLatestJsonl": {
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										},
										"directory": {
											"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
											"type": "Expression"
										},
										"file": {
											"value": "@concat(pipeline().parameters.filename,'.jsonl')",
											"type": "Expression"
										}
									},
									"SinkCSV": {
										"directory": {
											"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
											"type": "Expression"
										},
										"file": "specified in data flow",
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										}
									},
									"sinkJsonl": {
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										},
										"directory": {
											"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
											"type": "Expression"
										},
										"file": "specified in data flow"
									},
									"sinkLatestParquet": {
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										},
										"directory": {
											"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
											"type": "Expression"
										},
										"file": "specified in data flow"
									},
									"sinkParquet": {
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										},
										"directory": {
											"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
											"type": "Expression"
										},
										"file": "specified in data flow"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "JSONL to JSON LATEST",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Reformat Columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"quoteAllText": true,
									"filePattern": "arrayOfObjects"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "json_sink_dataset",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.blobContainer",
										"type": "Expression"
									},
									"directory": {
										"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(pipeline().parameters.filename,'.jsonl')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "json_sink_dataset",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.blobContainer",
										"type": "Expression"
									},
									"directory": {
										"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(pipeline().parameters.filename,'.json')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "JSONL to JSON",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Reformat Columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"quoteAllText": true,
									"filePattern": "arrayOfObjects"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "json_sink_dataset",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.blobContainer",
										"type": "Expression"
									},
									"directory": {
										"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(pipeline().parameters.filename,'.jsonl')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "json_sink_dataset",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.blobContainer",
										"type": "Expression"
									},
									"directory": {
										"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(pipeline().parameters.filename,'_',pipeline().RunId,'.json')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ArmtemplateTestDatasetIn",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "ArmtemplateTestDatasetOutSink",
								"type": "DatasetReference"
							}
						]
					}
				],
				"parameters": {
					"sourceFilename": {
						"type": "string",
						"defaultValue": "conposcovidloc_raw.csv"
					},
					"sourceRelativeUrl": {
						"type": "string",
						"defaultValue": "/api/3/action/datastore_search?resource_id=455fd63b-603d-4608-8216-7d8647f43350"
					},
					"blobContainer": {
						"type": "string",
						"defaultValue": "public"
					},
					"rawBlobDirectory": {
						"type": "string",
						"defaultValue": "raw/covid-19/covid_tracking"
					},
					"curatedBlobDirectory": {
						"type": "string",
						"defaultValue": "curated/covid-19/covid_tracking"
					},
					"filename": {
						"type": "string",
						"defaultValue": "covid_tracking"
					}
				},
				"folder": {
					"name": "Case Data"
				},
				"annotations": [
					"covidtracking"
				]
			},
			"dependsOn": []
		}
	]
}